//............O(n^2).............
class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    bool solve_row(vector<vector<int> >& M, int n,int row){
        for(int i=0;i<n;i++){
            if(M[row][i]!=0 && i!=row){
                return false;
            }
        }
        return 1;
    }
    bool solve_col(vector<vector<int> >& M, int n,int col){
        for(int i=0;i<n;i++){
            if(M[i][col]==0 && i!=col){
                return false;
            }
        }
        return 1;
    }
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        map<int,int>mp;
        int cnt=0;
        bool a=0,b=0;
        
        for(int i=0;i<n;i++){
           a=solve_row(M,n,i);
           b=solve_col(M,n,i);
           if(a && b){
               return i;
           }
        }
        return -1;
    }
    
};










///////////////0(n^2)
int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        stack<int>s;
        for(int i=0;i<n;i++){
            s.push(i);
        }
        while(s.size()!=1){
            int a=s.top();s.pop();
            int b=s.top();s.pop();
            if(M[a][b]==1){
                //a knows b then a cannot be ans so discard
                s.push(b);
            }
            else {
                //b knows a 
                s.push(a);
            }
           
        }
        int Can_ans=s.top();
        
        //check the both condition 
        for(int i=0;i<n;i++){
            if(M[Can_ans][i]!=0 && Can_ans!=i ){
                return -1;
                
            }
        }
        for(int i=0;i<n;i++){
            if(M[i][Can_ans]!=1 && Can_ans!=i ){
                return -1;
                
            }
        }
        return Can_ans;
    }
